/* eslint-disable @next/next/no-img-element */
import { v4 as randomUUID } from "uuid";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Card } from "../components/Card";
import { Footer } from "../components/Footer";
import { Header } from "../components/Header";
import { DbPool, PublicPool } from "../lib/interfaces/Pool";
import { getDb } from "../lib/api/mongodb";
import {
    createContext,
    Dispatch,
    SetStateAction,
    useContext,
    useMemo,
    useState,
} from "react";
import { WithId } from "mongodb";
import Delta from "quill-delta";
import pool from "./api/pool";
import EmptySvg from "../public/images/empty.svg";
import { SearchContext } from "../lib/context/search";
// Define Types
interface HomePageProps {
    pools: Array<PublicPool<true> & { raised: number }>;
}
// Define Page
const Home: NextPage<HomePageProps> = ({ pools }) => {
    // Define State
    const [search, setSearch] = useState<string>("");
    // Define Subrenders
    const cards = useMemo(() => {
        if (pools.length === 0) {
            return (
                <div className="md:my-[25vh] max-w-[10rem] mx-auto font-fm-primary text-center">
                    <EmptySvg className="opacity-10"></EmptySvg>
                    <span className="opacity-40">Lista vazia</span>
                </div>
            );
        }
        console.log(
            pools.filter((pool) =>
                pool.title.toLowerCase().includes(search.toLowerCase())
            )
        );
        return (
            <ul className="px-8 grid grid-cols-1 grid-flow-row sm:grid-cols-3 gap-6">
                {pools
                    .filter(
                        (pool) =>
                            search.length === 0 ||
                            pool.title
                                .toLowerCase()
                                .includes(search.toLowerCase())
                    )
                    .map((pool) => {
                        const delta = new Delta(pool.description);
                        const image = delta
                            .filter(
                                (op) =>
                                    typeof op.insert === "object" &&
                                    !!(op.insert as any).image
                            )
                            .map((op: any): string => op.insert.image)
                            .map((imgUrl) => new URL(imgUrl).pathname)
                            .at(0);
                        const descriptionText = delta.reduce((text, op) => {
                            if (!op.insert)
                                throw new TypeError(
                                    "only `insert` operations can be transformed!"
                                );
                            if (typeof op.insert !== "string")
                                return text + " ";
                            return text + op.insert;
                        }, "");
                        return (
                            <Card
                                key={pool.id}
                                id={pool.id}
                                title={pool.title}
                                description={descriptionText}
                                goal={pool.goal}
                                achieved={pool.raised}
                                image={image}
                            ></Card>
                        );
                    })}
            </ul>
        );
    }, [pools, search]);
    // Define Render
    return (
        <>
            <Head>
                <title>Meu Porquinho</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <SearchContext.Provider value={{ search, setSearch }}>
                <Header></Header>
            </SearchContext.Provider>
            <main className="mx-auto max-w-7xl pb-8 sm:min-h-[calc(100vh-9.5rem)]">
                <section id="most-popular" className="">
                    <h2 className="w-full pt-5 pb-3 text-2xl font-bold font-fm-primary sm:pb-0 px-4">
                        {search.length !== 0
                            ? "Resultado da Pesquisa"
                            : "Porquinhos Populares"}
                    </h2>
                    {cards}
                </section>
            </main>

            <Footer />
        </>
    );
};

export default Home;
// Export Server Side Functions
export const getServerSideProps: GetServerSideProps<HomePageProps> = async (
    context
) => {
    // Fetch pools
    const db = await getDb();
    // const poolDocs = await db
    //     .collection<DbPool>("pools")
    //     .find()
    //     .sort({ "meta.updatedAt": -1 })
    //     .limit(9)
    //     .toArray();
    const poolDocs = await db
        .collection<DbPool>("pools")
        .aggregate<WithId<DbPool & { raised: number }>>([
            {
                $match: {
                    "meta.deleted_at": null,
                },
            },
            { $sort: { "meta.updatedAt": -1 } },
            {
                $lookup: {
                    from: "donations",
                    localField: "_id",
                    foreignField: "pool",
                    as: "raised",
                },
            },
            {
                $addFields: {
                    raised: {
                        $sum: "$raised.amount",
                    },
                },
            },
        ])
        .toArray();
    const pools: Array<PublicPool<true> & { raised: number }> = poolDocs.map(
        (poolDoc) => ({
            id: poolDoc._id.toString(),
            title: poolDoc.title,
            creator: poolDoc.creator.toString(),
            description: poolDoc.description,
            goal: poolDoc.goal,
            raised: poolDoc.raised,
            meta: {
                createdAt: poolDoc.meta.createdAt.toISOString(),
                updatedAt: poolDoc.meta.updatedAt.toISOString(),
            },
        })
    );
    // Return data
    return {
        props: { pools },
    };
};
